# frozen_string_literal: true

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
FASTLANE_APPLE_ID = ENV["FASTLANE_APPLE_ID"]
FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD = ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"]
VERSION_NAME = ENV["VERSION_NAME"]

platform :ios do
  ios_dir = File.expand_path("../ios")

  desc "Get certificates"
  lane :sync_certs do
    sync_code_signing(
      git_branch: "main",
      type: "development",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      force_for_new_devices: true,
      readonly: true,
    )

    # You can repeat the sync_code_signing with other types of certificates such as appstore and adhoc
    sync_code_signing(
      git_branch: "main",
      type: "appstore",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      readonly: true,
    )
  end

  desc "Generate new development certificates"
  lane :generate_new_certs_dev do
    sync_code_signing(
      git_branch: "main",
      type: "development",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      force_for_new_devices: true,
      readonly: false,
    )
  end

  desc "Generate new appstore certificates"
  lane :generate_new_certs_appstore do
    sync_code_signing(
      git_branch: "main",
      type: "appstore",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      force_for_new_devices: true,
      readonly: false,
    )
  end

  lane :bump do
    skip_docs
    increment_build_number(
      xcodeproj: File.join(ios_dir, "App/App.xcodeproj"),
    )
  end

  lane :set_version_number do |options|
    skip_docs
    version_name = options[:version]
    increment_version_number(
      version_number: "#{version_name}",
      xcodeproj: File.join(ios_dir, "App/App.xcodeproj"),
    )
  end

  lane :build_beta do
    setup_ci if ENV["CI"]
    sync_certs
    build_app(
      configuration: "Release",
      workspace: File.join(ios_dir, "App/App.xcworkspace"),
      scheme: "App",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          DEVELOPER_APP_ID => "#{PROVISIONING_PROFILE_SPECIFIER}",
        },
      },
      clean: true,
    )
  end

  # TODO: pass changelog as parameter
  lane :upload_beta do
    build_beta
    upload_to_testflight(
      beta_app_feedback_email: "salemlfenn@gmail.com",
      username: "#{FASTLANE_APPLE_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
    )
  end
end

platform :android do
  android_dir = File.expand_path("../android")

  lane :build_apk do
    gradle(task: "clean", project_dir: android_dir)
    gradle(
      task: "assemble",
      project_dir: android_dir,
    )
    APK_LOCATION = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    sh("cp", "#{APK_LOCATION}", ENV["OUTPUT_PATH"])
  end

  lane :build_bundle do
    gradle(task: "clean", project_dir: android_dir)
    gradle(
      task: "bundleRelease",
      project_dir: android_dir,
      properties: {
        "android.injected.signing.store.file" => File.join(Dir.pwd, "..", ENV["KEYSTORE_FILE_PATH"]),
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEYSTORE_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEYSTORE_PASSWORD"],
      },
    )

    AAB_LOCATION = "#{lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]}"
    sh("cp", "#{AAB_LOCATION}", ENV["OUTPUT_PATH"])
  end

  # TODO: remove validate_only once sure this works as expected
  lane :upload_beta do
    skip_docs
    build_bundle
    AAB_LOCATION = lane_context[SharedValues::GRADLE_AAB_OUTPUT_PATH]
    upload_to_play_store(
      track: "beta",
      aab: AAB_LOCATION,
      json_key_data: ENV["PLAY_STORE_JSON_KEY"],
      skip_upload_images: true,
      skip_upload_screenshots: true,
      validate_only: true,
    )
  end
end
